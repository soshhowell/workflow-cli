{
    "name": "comprehensive_workflow_example",
    "memory": {
        "variables": {
            "project_name": "workflow-cli",
            "author": "Workflow CLI Team"
        },
        "schema": {
            "type": "object",
            "properties": {
                "project_name": {"type": "string"},
                "author": {"type": "string"},
                "python_version": {"type": "string"},
                "current_dir": {"type": "string"},
                "system": {
                    "type": "object",
                    "properties": {
                        "os": {"type": "string"},
                        "arch": {"type": "string"}
                    }
                },
                "build_info": {
                    "type": "object",
                    "properties": {
                        "commit_hash": {"type": "string"},
                        "build_time": {"type": "string"}
                    }
                },
                "api_health": {
                    "type": "object",
                    "properties": {
                        "status": {"type": "string"},
                        "version": {"type": "string"},
                        "uptime_seconds": {"type": "integer"},
                        "active_connections": {"type": "integer"}
                    }
                },
                "test_results": {
                    "type": "object",
                    "properties": {
                        "total_tests": {"type": ["integer", "string"]},
                        "passed_tests": {"type": ["integer", "string"]},
                        "test_duration": {"type": "string"}
                    }
                },
                "server_port": {"type": "integer"},
                "memory_usage": {"type": "integer"}
            }
        }
    },
    "steps": [
        {
            "name": "show_current_directory",
            "command": "pwd",
            "memory_update": [{
                "regex": "^(.+?)\\s*$",
                "variable": "memory.current_dir"
            }]
        },
        {
            "name": "get_system_info_regex",
            "command": "uname -s && uname -m",
            "memory_update": [{
                "regex": "^(\\w+)",
                "variable": "memory.system.os"
            }, {
                "regex": "\\n(\\w+)$",
                "variable": "memory.system.arch"
            }]
        },
        {
            "name": "check_python_version",
            "command": "python3 --version",
            "memory_update": [{
                "regex": "Python (\\d+\\.\\d+\\.\\d+)",
                "variable": "memory.python_version"
            }]
        },
        {
            "name": "get_git_info_regex",
            "command": "git log -1 --pretty=format:'Commit: %H%nDate: %ci' && echo",
            "memory_update": [{
                "regex": "Commit: ([a-f0-9]+)",
                "variable": "memory.build_info.commit_hash"
            }, {
                "regex": "Date: ([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})",
                "variable": "memory.build_info.build_time"
            }]
        },
        {
            "name": "simulate_test_results_regex",
            "command": "echo 'Running tests...\\n======= TEST RESULTS =======\\nRan 25 tests in 2.1s\\n\\nOK (passed=23, skipped=1, failures=1)\\n======= END RESULTS ======='",
            "max_retries": 1,
            "success": {
                "regex": "OK \\(passed=\\d+.*\\)"
            },
            "memory_update": [{
                "regex": "Ran (\\d+) tests",
                "variable": "memory.test_results.total_tests"
            }, {
                "regex": "passed=(\\d+)",
                "variable": "memory.test_results.passed_tests"
            }, {
                "regex": "in ([0-9.]+s)",
                "variable": "memory.test_results.test_duration"
            }]
        },
        {
            "name": "check_api_health_json",
            "command": "echo '{\"status\": \"healthy\", \"version\": \"1.2.3\", \"uptime\": 86400, \"metrics\": {\"active_connections\": 12, \"requests_per_second\": 35.4}, \"dependencies\": [\"database\", \"redis\"]}'",
            "success": {
                "json": "status"
            },
            "memory_update": [{
                "json": "status",
                "variable": "memory.api_health.status"
            }, {
                "json": "version",
                "variable": "memory.api_health.version"
            }, {
                "json": "uptime",
                "variable": "memory.api_health.uptime_seconds"
            }, {
                "json": "metrics.active_connections",
                "variable": "memory.api_health.active_connections"
            }]
        },
        {
            "name": "validate_database_connection_json",
            "command": "echo '{\"database\": {\"status\": \"connected\", \"host\": \"localhost:5432\", \"latency_ms\": 8}, \"cache\": {\"status\": \"connected\", \"hit_rate\": 0.92}}'",
            "max_retries": 2,
            "success": {
                "json": "database.status"
            },
            "retryDelay": 1.5
        },
        {
            "name": "extract_server_details_json",
            "command": "echo '{\"server\": {\"port\": 8080, \"status\": \"running\", \"connections\": 8}, \"resources\": {\"cpu_percent\": 12.5, \"memory_mb\": 384}}'",
            "delay": 2.0,
            "success": {
                "json": "server.status"
            },
            "memory_update": [{
                "json": "server.port",
                "variable": "memory.server_port"
            }, {
                "json": "resources.memory_mb",
                "variable": "memory.memory_usage"
            }]
        },
        {
            "name": "quick_timeout_demo",
            "command": "echo 'Testing timeout feature...' && sleep 2 && echo 'Task completed within timeout'",
            "timeout": 5,
            "success": {
                "regex": "Task completed within timeout"
            }
        },
        {
            "name": "generate_comprehensive_report",
            "command": "echo 'Comprehensive Report for {memory.project_name} by {memory.author}:\\n=== System Info ===\\n- Directory: {memory.current_dir}\\n- OS: {memory.system.os}/{memory.system.arch}\\n- Python: {memory.python_version}\\n=== Build Info ===\\n- Commit: {memory.build_info.commit_hash}\\n- Build Time: {memory.build_info.build_time}\\n=== Test Results ===\\n- Tests: {memory.test_results.passed_tests}/{memory.test_results.total_tests} passed in {memory.test_results.test_duration}\\n=== API Health ===\\n- Status: {memory.api_health.status} (v{memory.api_health.version})\\n- Uptime: {memory.api_health.uptime_seconds}s with {memory.api_health.active_connections} connections\\n=== Server ===\\n- Port: {memory.server_port}\\n- Memory Usage: {memory.memory_usage}MB'"
        }
    ]
}